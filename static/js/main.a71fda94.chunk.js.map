{"version":3,"sources":["config/keys.js","assets/pizza_slice.png","components/header_nav.js","util/venue_api_util.js","components/venue.js","components/sliceline.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CLIENT_ID","CLIENT_SECRET","HeaderNav","hasLoc","className","src","pizzaIcon","alt","process","REACT_APP_CLIENT_ID","require","REACT_APP_CLIENT_SECRET","Venue","venue","useState","details","setDetails","useEffect","cachedDetails","sessionStorage","getItem","id","cacheExpirationTime","currTime","Date","getTime","cacheExpired","JSON","parse","venueId","params","URLSearchParams","append","axios","get","toString","fetchVenueDetails","then","data","clear","setItem","newDetails","response","stringify","catch","err","console","log","bestPhoto","prefix","suffix","name","href","canonicalUrl","contact","formattedPhone","location","address","repeat","price","tier","rating","Sliceline","started","setStarted","venues","setVenues","navigator","geolocation","watchPosition","latitude","longitude","fetchVenues","coords","map","key","onClick","e","preventDefault","title","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a71fda94.chunk.js","sourcesContent":["module.exports = {\n  CLIENT_ID: \"ZRKHIMTZ1JFUVN43CIGGEZWKHG3PGZFLQEJ0OP55C0LUG5OR\",\n  CLIENT_SECRET: \"53JDOUSGH0T1QH3NBUX4HANYQRB21ME3EUFROHVQJPK52TLV\"\n}","module.exports = __webpack_public_path__ + \"static/media/pizza_slice.3ad32b2a.png\";","import React from \"react\";\nimport pizzaIcon from \"../assets/pizza_slice.png\";\n\nconst HeaderNav = hasLoc => {\n  return (\n    <header className=\"header-nav\">\n      <h1>\n        <img src={pizzaIcon} alt=\"SliceLine Pizza Slice Icon\" />\n        SliceLine\n        <img src={pizzaIcon} alt=\"SliceLine Pizza Slice Icon\" />\n      </h1>\n    </header>\n  );\n};\n\nexport default HeaderNav;","import axios from \"axios\";\n\nconst CLIENT_ID = process.env.REACT_APP_CLIENT_ID || require(\"../config/keys\").CLIENT_ID;\nconst CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET || require(\"../config/keys\").CLIENT_SECRET;\n\nexport const fetchVenues = ({ latitude, longitude }) => {\n  const params = new URLSearchParams();\n  params.append(\"client_id\", CLIENT_ID);\n  params.append(\"client_secret\", CLIENT_SECRET);\n  params.append(\"ll\", `${latitude},${longitude}`);\n  params.append(\"query\", \"pizza\");\n  params.append(\"limit\", \"10\");\n  params.append(\"v\", \"20200131\");\n  return axios.get(`https://api.foursquare.com/v2/venues/search?${params.toString()}`);\n};\n\nexport const fetchVenueDetails = venueId => {\n  const params = new URLSearchParams();\n  params.append(\"client_id\", CLIENT_ID);\n  params.append(\"client_secret\", CLIENT_SECRET);\n  params.append(\"v\", \"20200131\");\n  return axios.get(`https://api.foursquare.com/v2/venues/${venueId}?${params.toString()}`);\n};","import React, { useState, useEffect } from \"react\";\nimport { fetchVenueDetails } from \"../util/venue_api_util\";\nimport pizzaIcon from \"../assets/pizza_slice.png\";\nimport \"../css/venue.css\";\n\nconst Venue = ({ venue }) => {\n  const [details, setDetails] = useState(null);\n\n  useEffect(() => {\n    const cachedDetails = sessionStorage.getItem(venue.id);\n    const cacheExpirationTime = sessionStorage.getItem(\"expiration\");\n    const currTime = new Date().getTime();\n    const cacheExpired = !cacheExpirationTime || currTime > cacheExpirationTime;\n\n    if (cachedDetails && !cacheExpired) {\n      setDetails(JSON.parse(cachedDetails));\n    } else {\n      fetchVenueDetails(venue.id)\n        .then(({ data }) => {\n          if (cacheExpired) {\n            sessionStorage.clear();\n            sessionStorage.setItem(\"expiration\", currTime + 3 * 60 * 60 * 1000);\n          }\n\n          const newDetails = data.response.venue;\n          sessionStorage.setItem(venue.id, JSON.stringify(newDetails));\n          setDetails(newDetails);\n        })\n        .catch(err => console.log(err));\n    }\n  }, [venue.id]);\n  \n  if (!details) return \"\";\n  return (\n    <div className=\"venue-details-container\">\n      <div className=\"venue-details\">\n        <img \n          className=\"venue-image\"\n          src={details.bestPhoto ? `${details.bestPhoto.prefix}300${details.bestPhoto.suffix}` : pizzaIcon} \n          alt={`Best of ${details.name}`}\n        />\n        <div className=\"venue-info\">\n          <h3><a href={details.canonicalUrl}>{details.name}</a></h3>\n          <h3>{details.contact.formattedPhone}</h3>\n          <h3>{details.location.address}</h3>\n          <h3>Price: {\"$\".repeat(details.price.tier)}</h3>\n          <h3>Rating: {details.rating || \"N/A\"}</h3>\n        </div>\n      </div>\n      <div className=\"pizza-border\">\n        <img className=\"list-image\" src={pizzaIcon} alt=\"SliceLine Pizza Slice Icon\" />\n        <img className=\"list-image\" src={pizzaIcon} alt=\"SliceLine Pizza Slice Icon\" />\n        <img className=\"list-image\" src={pizzaIcon} alt=\"SliceLine Pizza Slice Icon\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Venue;","import React, { useState, useEffect } from \"react\";\nimport HeaderNav from \"./header_nav\";\nimport Venue from \"./venue\";\nimport { fetchVenues } from \"../util/venue_api_util\";\nimport \"../css/sliceline.css\";\nimport pizzaIcon from \"../assets/pizza_slice.png\";\n\nconst Sliceline = () => {\n  const [started, setStarted] = useState(false);\n  const [venues, setVenues] = useState(null);\n\n  useEffect(() => {\n    navigator.geolocation.watchPosition(({ coords }) => {\n      fetchVenues(coords)\n        .then(({ data }) => {\n          setVenues(data.response.venues);\n        })\n        .catch(err => console.log(err));\n    });\n  }, []);\n\n  return (\n    <div className=\"top-container\">\n      <HeaderNav />\n      {\n        venues && started ? (\n          <main className=\"venues-index\">\n            <h2>Pizza Near You!</h2>\n            <ul>\n              {\n                venues.map(venue => (\n                  <li key={venue.id}>\n                    <Venue venue={venue} />\n                  </li>\n                ))\n              }\n            </ul>\n          </main>\n        ) : (\n          <main className=\"loading-placeholder\">\n            <img src={pizzaIcon} alt=\"SliceLine Pizza Slice Icon\" />\n            <button \n              className={started ? \"start-button inactive\" : \"start-button\"}\n              onClick={e => {\n                e.preventDefault();\n                setStarted(true);\n              }}\n            >\n              Local Pizza!\n            </button>\n          </main>\n        )\n      }\n      <footer className=\"icon-attribution\">Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\"> www.flaticon.com</a></footer>\n    </div>\n  )\n};\n\nexport default Sliceline;","import React from 'react';\nimport Sliceline from \"./components/sliceline.js\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sliceline />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}